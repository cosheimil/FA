#set text(
  lang: "ru",
  size: 12pt,
)

#show table.cell.where(y: 0): set text(weight: "bold")
#show figure: set block(breakable: true)

#set page(
  height: 41cm,
  numbering: "— 1 —",
  header: align(right)[СУБД. Самостоятельная работа №1],
  footer: align(right)[ПМ23-1, Варвус А.И.]
)

#set document(
  title: "Практическое занятие 2",
  author: "Варвус А.И."
)

= Задание 1

Отношение Авиарейс с атрибутами:
- Номер рейса
- Авиакомпания 
- Аэропорт вылета
- Аэропорт прилета
- Наименование_самолета
- Пилот (ФИО, Лицензия, Телефон)
- Время вылета
- Время_прилета, 
- Город_вылета, 
- Город_прилета
- Цена_билета
- Номер_места
- Тип_места

_Решение_:

Мы работаем в авиакомании и начальник попросил нас сохранить данные покупок билетов в БД, так как Excel не смог. Но чтобы запросы грузились не по 5 минут, а молниеносно. Поэтому выделяем план работ:

+ Собираем данные хоть как-то
+ Нормиируем к 1НФ
+ Нормиируем к 3НФ

Почему переход сразу от 1НФ к 3НФ? Чтобы не делать лишнюю работу и сразу создать хорошую бд

Собранный датасет: @collected_dataset

Сразу наблюдаем ряд проблем:
- В одной таблице информация обо всем, поэтому создадим позже новые сущности
  - О рейсах
  - О пилотах
  - О пассажире и его билете
- Атрибут пилот вбирает в себе очень много информации:
  - ФИО
  - Лицензия
  - Номер телефона

Все остальные проблемы связаны с "повторением" информации, поэтому создаем новые сущности:

+ Рейс. *PK* - Номер рейса
  - Номер рейса
  - Авиакомпания
  - Аэропорт вылета
  - Аэропорт прилета
  - Наименование самолета
  - Закрепленный пилот *FK*(_только номер телефона_)
  - Время вылета
  - Время прилета

Храним всю информацию про рейсы 

+ Аэропорт. *PK* - Наименование Аэропорта(Аэропорт вылета, Аэропорт прилета), *FK* - Город Аэропорта, (Город вылета, Город прилета)
- Наименование Аэропорта
- Город Аэропорта

Таблица создана для взаимной связи Аэропорт - Город

+ Пассажир. *PK* - Номер рейса
- Номер рейса
- Тип места
- Номер места
- Цена билета

#pagebreak()

Вся информация, которая волнует клиента

+ Пилот. *PK* - Номер телефона
- Номер телефона
- Фамилия *FK*
- Имя
- Отчество
- Лицензия

Таблица разгружает основную

#let first = csv("airports.csv")
#rotate(
  -90deg,
  reflow: true
)[
  #figure(
    table(
      columns: 13,
      ..first.flatten()
    ),
    caption: [Первоначальная таблица]
  ) <collected_dataset>
]

#let aiport = csv("airport_transformed.csv")
#figure(
  table(
    columns: 2,
    ..aiport.flatten()
  ),
  caption: [Аэропорты]
) <aiports>

#let pasenger = csv("passenger_transformed.csv")
#figure(
  table(
    columns: 4,
    ..pasenger.flatten()
  ),
  caption: [Пассажиры]
) <passenger>

#let pilots = csv("pilot.csv")
#figure(
  table(
    columns: 5,
    ..pilots.flatten()
  ),
  caption: [Пилоты]
) <pilots>

#let planes = csv("planes_transformed.csv")
#rotate(
  -90deg,
  reflow: true
)[#figure(
  table(
    columns: 8,
    ..planes.flatten()
  ),
  caption: [Полеты]
) <planes>
]
